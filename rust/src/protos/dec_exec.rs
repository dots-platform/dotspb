// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dec_exec.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  A UUID encoded according to the recommendations in
///  https://github.com/protocolbuffers/protobuf/issues/2224#issuecomment-760635430.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:dec_exec.UUID)
pub struct UUID {
    // message fields
    // @@protoc_insertion_point(field:dec_exec.UUID.hi)
    pub hi: u64,
    // @@protoc_insertion_point(field:dec_exec.UUID.lo)
    pub lo: u64,
    // special fields
    // @@protoc_insertion_point(special_field:dec_exec.UUID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UUID {
    fn default() -> &'a UUID {
        <UUID as ::protobuf::Message>::default_instance()
    }
}

impl UUID {
    pub fn new() -> UUID {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hi",
            |m: &UUID| { &m.hi },
            |m: &mut UUID| { &mut m.hi },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lo",
            |m: &UUID| { &m.lo },
            |m: &mut UUID| { &mut m.lo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UUID>(
            "UUID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UUID {
    const NAME: &'static str = "UUID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.hi = is.read_fixed64()?;
                },
                17 => {
                    self.lo = is.read_fixed64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.hi != 0 {
            my_size += 1 + 8;
        }
        if self.lo != 0 {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.hi != 0 {
            os.write_fixed64(1, self.hi)?;
        }
        if self.lo != 0 {
            os.write_fixed64(2, self.lo)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UUID {
        UUID::new()
    }

    fn clear(&mut self) {
        self.hi = 0;
        self.lo = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UUID {
        static instance: UUID = UUID {
            hi: 0,
            lo: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UUID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UUID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UUID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UUID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:dec_exec.App)
pub struct App {
    // message fields
    // @@protoc_insertion_point(field:dec_exec.App.app_name)
    pub app_name: ::std::string::String,
    // @@protoc_insertion_point(field:dec_exec.App.app_uid)
    pub app_uid: i64,
    // @@protoc_insertion_point(field:dec_exec.App.func_name)
    pub func_name: ::std::string::String,
    // @@protoc_insertion_point(field:dec_exec.App.in_files)
    pub in_files: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:dec_exec.App.out_files)
    pub out_files: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:dec_exec.App.client_id)
    pub client_id: ::std::string::String,
    // @@protoc_insertion_point(field:dec_exec.App.request_id)
    pub request_id: ::protobuf::MessageField<UUID>,
    // @@protoc_insertion_point(field:dec_exec.App.args)
    pub args: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:dec_exec.App.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a App {
    fn default() -> &'a App {
        <App as ::protobuf::Message>::default_instance()
    }
}

impl App {
    pub fn new() -> App {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_name",
            |m: &App| { &m.app_name },
            |m: &mut App| { &mut m.app_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_uid",
            |m: &App| { &m.app_uid },
            |m: &mut App| { &mut m.app_uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "func_name",
            |m: &App| { &m.func_name },
            |m: &mut App| { &mut m.func_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in_files",
            |m: &App| { &m.in_files },
            |m: &mut App| { &mut m.in_files },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "out_files",
            |m: &App| { &m.out_files },
            |m: &mut App| { &mut m.out_files },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &App| { &m.client_id },
            |m: &mut App| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UUID>(
            "request_id",
            |m: &App| { &m.request_id },
            |m: &mut App| { &mut m.request_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "args",
            |m: &App| { &m.args },
            |m: &mut App| { &mut m.args },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<App>(
            "App",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for App {
    const NAME: &'static str = "App";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.app_name = is.read_string()?;
                },
                16 => {
                    self.app_uid = is.read_int64()?;
                },
                26 => {
                    self.func_name = is.read_string()?;
                },
                34 => {
                    self.in_files.push(is.read_string()?);
                },
                42 => {
                    self.out_files.push(is.read_string()?);
                },
                50 => {
                    self.client_id = is.read_string()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request_id)?;
                },
                66 => {
                    self.args.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.app_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.app_name);
        }
        if self.app_uid != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.app_uid);
        }
        if !self.func_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.func_name);
        }
        for value in &self.in_files {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.out_files {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.client_id);
        }
        if let Some(v) = self.request_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.args {
            my_size += ::protobuf::rt::bytes_size(8, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.app_name.is_empty() {
            os.write_string(1, &self.app_name)?;
        }
        if self.app_uid != 0 {
            os.write_int64(2, self.app_uid)?;
        }
        if !self.func_name.is_empty() {
            os.write_string(3, &self.func_name)?;
        }
        for v in &self.in_files {
            os.write_string(4, &v)?;
        };
        for v in &self.out_files {
            os.write_string(5, &v)?;
        };
        if !self.client_id.is_empty() {
            os.write_string(6, &self.client_id)?;
        }
        if let Some(v) = self.request_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        for v in &self.args {
            os.write_bytes(8, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> App {
        App::new()
    }

    fn clear(&mut self) {
        self.app_name.clear();
        self.app_uid = 0;
        self.func_name.clear();
        self.in_files.clear();
        self.out_files.clear();
        self.client_id.clear();
        self.request_id.clear();
        self.args.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static App {
        static instance: App = App {
            app_name: ::std::string::String::new(),
            app_uid: 0,
            func_name: ::std::string::String::new(),
            in_files: ::std::vec::Vec::new(),
            out_files: ::std::vec::Vec::new(),
            client_id: ::std::string::String::new(),
            request_id: ::protobuf::MessageField::none(),
            args: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for App {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("App").unwrap()).clone()
    }
}

impl ::std::fmt::Display for App {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for App {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:dec_exec.Blob)
pub struct Blob {
    // message fields
    // @@protoc_insertion_point(field:dec_exec.Blob.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:dec_exec.Blob.val)
    pub val: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:dec_exec.Blob.client_id)
    pub client_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:dec_exec.Blob.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Blob {
    fn default() -> &'a Blob {
        <Blob as ::protobuf::Message>::default_instance()
    }
}

impl Blob {
    pub fn new() -> Blob {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Blob| { &m.key },
            |m: &mut Blob| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "val",
            |m: &Blob| { &m.val },
            |m: &mut Blob| { &mut m.val },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &Blob| { &m.client_id },
            |m: &mut Blob| { &mut m.client_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Blob>(
            "Blob",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Blob {
    const NAME: &'static str = "Blob";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.val = is.read_bytes()?;
                },
                26 => {
                    self.client_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.val.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.val);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.client_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.val.is_empty() {
            os.write_bytes(2, &self.val)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(3, &self.client_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Blob {
        Blob::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.val.clear();
        self.client_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Blob {
        static instance: Blob = Blob {
            key: ::std::string::String::new(),
            val: ::std::vec::Vec::new(),
            client_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Blob {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Blob").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Blob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Blob {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:dec_exec.Result)
pub struct Result {
    // message fields
    // @@protoc_insertion_point(field:dec_exec.Result.result)
    pub result: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:dec_exec.Result.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Result {
    fn default() -> &'a Result {
        <Result as ::protobuf::Message>::default_instance()
    }
}

impl Result {
    pub fn new() -> Result {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &Result| { &m.result },
            |m: &mut Result| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Result>(
            "Result",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Result {
    const NAME: &'static str = "Result";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.result.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.result.is_empty() {
            os.write_string(1, &self.result)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Result {
        Result::new()
    }

    fn clear(&mut self) {
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Result {
        static instance: Result = Result {
            result: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Result {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Result").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Result {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0edec_exec.proto\x12\x08dec_exec\"&\n\x04UUID\x12\x0e\n\x02hi\x18\
    \x01\x20\x01(\x06R\x02hi\x12\x0e\n\x02lo\x18\x02\x20\x01(\x06R\x02lo\"\
    \xee\x01\n\x03App\x12\x19\n\x08app_name\x18\x01\x20\x01(\tR\x07appName\
    \x12\x17\n\x07app_uid\x18\x02\x20\x01(\x03R\x06appUid\x12\x1b\n\tfunc_na\
    me\x18\x03\x20\x01(\tR\x08funcName\x12\x19\n\x08in_files\x18\x04\x20\x03\
    (\tR\x07inFiles\x12\x1b\n\tout_files\x18\x05\x20\x03(\tR\x08outFiles\x12\
    \x1b\n\tclient_id\x18\x06\x20\x01(\tR\x08clientId\x12-\n\nrequest_id\x18\
    \x07\x20\x01(\x0b2\x0e.dec_exec.UUIDR\trequestId\x12\x12\n\x04args\x18\
    \x08\x20\x03(\x0cR\x04args\"G\n\x04Blob\x12\x10\n\x03key\x18\x01\x20\x01\
    (\tR\x03key\x12\x10\n\x03val\x18\x02\x20\x01(\x0cR\x03val\x12\x1b\n\tcli\
    ent_id\x18\x03\x20\x01(\tR\x08clientId\"\x20\n\x06Result\x12\x16\n\x06re\
    sult\x18\x01\x20\x01(\tR\x06result2\x98\x01\n\x07DecExec\x12)\n\x04Exec\
    \x12\r.dec_exec.App\x1a\x10.dec_exec.Result\"\0\x120\n\nUploadBlob\x12\
    \x0e.dec_exec.Blob\x1a\x10.dec_exec.Result\"\0\x120\n\x0cRetrieveBlob\
    \x12\x0e.dec_exec.Blob\x1a\x0e.dec_exec.Blob\"\0B/\n\x17io.grpc.dtrust.d\
    ec_execB\x0cDecExecProtoP\x01\xa2\x02\x03DTEJ\xc2\n\n\x06\x12\x04\0\0)\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\
    \n\x02\x08\n\x12\x03\x02\0\"\n\x08\n\x01\x08\x12\x03\x03\00\n\t\n\x02\
    \x08\x01\x12\x03\x03\00\n\x08\n\x01\x08\x12\x03\x04\0-\n\t\n\x02\x08\x08\
    \x12\x03\x04\0-\n\x08\n\x01\x08\x12\x03\x05\0!\n\t\n\x02\x08$\x12\x03\
    \x05\0!\n\x08\n\x01\x02\x12\x03\x07\0\x11\n\n\n\x02\x06\0\x12\x04\t\0\r\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\t\x08\x0f\n\x0b\n\x04\x06\0\x02\0\x12\
    \x03\n\x04%\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\n\x08\x0c\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\n\r\x10\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\n\
    \x1b!\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x0b\x04,\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x0b\x08\x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0b\
    \x13\x17\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0b\"(\n\x0b\n\x04\x06\0\
    \x02\x02\x12\x03\x0c\x04,\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0c\x08\
    \x14\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0c\x15\x19\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03\x0c$(\n\x92\x01\n\x02\x04\0\x12\x04\x11\0\x14\x01\
    \x1a\x85\x01\x20A\x20UUID\x20encoded\x20according\x20to\x20the\x20recomm\
    endations\x20in\n\x20https://github.com/protocolbuffers/protobuf/issues/\
    2224#issuecomment-760635430.\n\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\x0c\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x12\x04\x13\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x12\x04\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\x0c\x0e\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12\x11\x12\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x13\x04\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x13\x04\x0b\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x13\x0c\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x13\x11\x12\n\n\n\x02\x04\x01\x12\x04\x16\0\x1f\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x16\x08\x0b\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x17\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x17\x04\n\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x17\x0b\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x17\x16\x17\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x18\x04\x16\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03\x18\x04\t\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x18\n\x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x18\x14\
    \x15\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x19\x04\x19\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x19\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x19\x0b\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x19\x17\x18\n\x0b\n\
    \x04\x04\x01\x02\x03\x12\x03\x1a\x04!\n\x0c\n\x05\x04\x01\x02\x03\x04\
    \x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1a\r\x13\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1a\x14\x1c\n\x0c\n\x05\x04\x01\
    \x02\x03\x03\x12\x03\x1a\x1f\x20\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x1b\
    \x04\"\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03\x1b\x04\x0c\n\x0c\n\x05\
    \x04\x01\x02\x04\x05\x12\x03\x1b\r\x13\n\x0c\n\x05\x04\x01\x02\x04\x01\
    \x12\x03\x1b\x14\x1d\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1b\x20!\n\
    \x0b\n\x04\x04\x01\x02\x05\x12\x03\x1c\x04\x19\n\x0c\n\x05\x04\x01\x02\
    \x05\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x1c\
    \x0b\x14\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x1c\x17\x18\n\x0b\n\x04\
    \x04\x01\x02\x06\x12\x03\x1d\x04\x18\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\
    \x03\x1d\x04\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x1d\t\x13\n\x0c\
    \n\x05\x04\x01\x02\x06\x03\x12\x03\x1d\x16\x17\n\x0b\n\x04\x04\x01\x02\
    \x07\x12\x03\x1e\x04\x1c\n\x0c\n\x05\x04\x01\x02\x07\x04\x12\x03\x1e\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x1e\r\x12\n\x0c\n\x05\x04\
    \x01\x02\x07\x01\x12\x03\x1e\x13\x17\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\
    \x03\x1e\x1a\x1b\n\n\n\x02\x04\x02\x12\x04!\0%\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03!\x08\x0c\n\x0b\n\x04\x04\x02\x02\0\x12\x03\"\x04\x13\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\"\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03\"\x0b\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\"\x11\x12\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03#\x04\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03#\x04\t\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03#\n\r\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03#\x10\x11\n\x0b\n\x04\x04\x02\x02\x02\x12\
    \x03$\x04\x19\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03$\x04\n\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03$\x0b\x14\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03$\x17\x18\n\n\n\x02\x04\x03\x12\x04'\0)\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03'\x08\x0e\n\x0b\n\x04\x04\x03\x02\0\x12\x03(\x04\x16\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03(\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03(\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03(\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(UUID::generated_message_descriptor_data());
            messages.push(App::generated_message_descriptor_data());
            messages.push(Blob::generated_message_descriptor_data());
            messages.push(Result::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
